{"version":3,"sources":["components/general/CallApiButton.js","constants/constants.js","utils/utils.js","containers/CharacterContainer.js","containers/BookContainer.js","containers/HouseContainer.js","components/characterStuff/CharacterDrillDown.js","components/houseStuff/SwornMemberList.js","components/houseStuff/HouseDrillDown.js","GoTApp.js","serviceWorker.js","reducers/characterReducer.js","reducers/bookReducer.js","services/apiRequests.js","sagas/characterSagas.js","sagas/bookSagas.js","reducers/houseReducer.js","sagas/houseSagas.js","index.js"],"names":["CallApiButton","props","react_default","a","createElement","className","onClick","buttonName","characterActions","CHARACTERS_FETCH_START","CHARACTERS_FETCH_SUCCESS","CHARACTERS_FETCH_FAILURE","FETCH_CHARACTER_START","FETCH_CHARACTER_SUCCESS","FETCH_CHARACTER_FAILURE","SELECT_CHARACTER","bookActions","BOOKS_FETCH_START","BOOKS_FETCH_SUCCESS","BOOKS_FETCH_FAILURE","houseActions","HOUSES_FETCH_START","HOUSES_FETCH_SUCCESS","HOUSES_FETCH_FAILURE","SELECT_HOUSE","FETCH_HOUSE_START","FETCH_HOUSE_SUCCESS","FETCH_HOUSE_FAILURE","isObjectEmpty","obj","length","constructQueryStringFromObj","Object","keys","filter","key","map","join","isStringEmpty","str","undefined","getIdFromUrlString","splitObj","split","generateListKey","listName","listItem","concat","url","commonFilter","row","column","id","toLowerCase","includes","value","commonSort","b","desc","Infinity","startsWith","slice","CharacterContainer","state","pageSize","filterUnknownCulture","getMoreCharacters","_this","fetchCharacters","page","lastPageRequested","characterValidator","character","name","aliases","updateCultureFilter","setState","changePageSize","filterCharacterByCulture","it","culture","tdProps","rowInfo","e","handleOriginal","original","selectCharacter","filterBooksAppearedIn","i","books","bookId","createBookList","bookUrl","componentDidMount","componentDidUpdate","_this2","this","domainContainerClassName","isDrillDownOpen","filteredCharacters","values","characters","columns","Header","accessor","Footer","filterable","filterMethod","gender","Cell","type","onChange","checked","react_table_es","data","resolveData","onPageSizeChange","showFilters","loading","fetchingCharacters","getTdProps","general_CallApiButton","Component","connect","list","fetching","dispatch","payload","BookContainer","bookFilter","updateFilter","target","reformatBookTitle","title","convertApiDateToFriendlyDate","apiDate","Date","toLocaleDateString","showFilter","sorthMethod","date","fetchingBooks","pageSizeOptions","fetchBooks","HouseContainer","houseFilter","getMoreHouses","fetchHouses","reformatHouseTitle","resolveHouseData","houseData","lordId","currentLord","lordName","houseId","selectHouse","characterId","houses","house","forEach","fetchCharacter","sortMethod","region","show","fetchingHouses","CharacterDrillDown","_Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","SwornMemberList","members","member","HouseDrillDown","_getPrototypeOf2","_len","args","Array","_key","call","checkForAndFetchCharacters","overlord","fetchHouse","swornMembers","getLordFromCharacters","selectLord","selectOverlord","onMemberClick","console","log","isLordLoaded","words","coatOfArms","overlordName","align","houseStuff_SwornMemberList","GoTApp","viewBooks","viewCharacters","viewHouses","changeView","selectedCharacter","selectedHouse","containers_CharacterContainer","containers_BookContainer","containers_HouseContainer","CharacterDrillDown_CharacterDrillDown","houseStuff_HouseDrillDown","Boolean","window","location","hostname","match","initialState","error","lastPageRequest","apiRequests","API_ROOT","fetchAll","axios","method","fetch","queryString","fetchOne","characterFetch","characterSagas","action","regenerator_default","wrap","_context","prev","next","sent","put","t0","stop","_marked","_context2","_marked2","_context3","takeEvery","_marked3","bookSagas","bookSagas_marked","bookSagas_marked2","houseFetch","houseSagas","houseSagas_marked","houseSagas_marked2","all","t1","t2","t3","houseSagas_marked3","rootReducer","combineReducers","objectSpread","newCharacters","newCharacter","newHouses","newHouse","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","es","src_GoTApp","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.218be32c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CallApiButton = props => {\r\n  const handleClick = () => {\r\n    props.onClick();\r\n    \r\n  }\r\n\r\n  return(\r\n    <button className=\"\" onClick={handleClick}>\r\n      {props.buttonName}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default CallApiButton;","export const characterActions = {\r\n  CHARACTERS_FETCH_START: \"CHARACTERS_FETCH_START\",\r\n  CHARACTERS_FETCH_SUCCESS: \"CHARACTER_FETCH_SUCCESS\",\r\n  CHARACTERS_FETCH_FAILURE: \"CHARACTERS_FETCH_FAILURE\",\r\n  FETCH_CHARACTER_START: \"FETCH_CHARACTER_START\",  \r\n  FETCH_CHARACTER_SUCCESS: \"FETCH_CHARACTER_SUCCESS\",  \r\n  FETCH_CHARACTER_FAILURE: \"FETCH_CHARACTER_FAILURE\",\r\n  SELECT_CHARACTER: \"SELECT_CHARACTER\"\r\n};\r\n\r\nexport const bookActions = {\r\n  BOOKS_FETCH_START: \"BOOKS_FETCH_START\",\r\n  BOOKS_FETCH_SUCCESS: \"BOOKS_FETCH_SUCCESS\",\r\n  BOOKS_FETCH_FAILURE: \"BOOKS_FETCH_FAILURE\"\r\n}\r\n\r\nexport const houseActions = {\r\n  HOUSES_FETCH_START: \"HOUSES_FETCH_START\",\r\n  HOUSES_FETCH_SUCCESS: \"HOUSES_FETCH_SUCCESS\",\r\n  HOUSES_FETCH_FAILURE: \"HOUSES_FETCH_FAILURE\",\r\n  SELECT_HOUSE: \"SELECT_HOUSE\",\r\n  FETCH_HOUSE_START: \"FETCH_HOUSE\",\r\n  FETCH_HOUSE_SUCCESS: \"FETCH_HOUSE_SUCCESS\",\r\n  FETCH_HOUSE_FAILURE: \"FETCH_HOUSE_FAILURE\"\r\n}","export function isObjectEmpty(obj) {\r\n  if (obj == null) return true;\r\n  if (obj.length === 0) return true;\r\n  return false;\r\n}\r\n\r\nexport function constructQueryStringFromObj(obj) {\r\n  return Object.keys(obj).filter(key => key !== 'id').map(key => key + \"=\" + obj[key]).join('&');\r\n}\r\n\r\nexport function isStringEmpty(str) {\r\n  return (str === undefined || str === null || str === '');\r\n}\r\n\r\nexport function getIdFromUrlString(str) {\r\n  let splitObj = str.split('/');\r\n  return +splitObj[splitObj.length - 1];\r\n}\r\n\r\nexport function generateListKey(listName, listItem) {\r\n  if (typeof listItem === 'string') {\r\n    return `${listName}-${listItem}`;\r\n  } else {\r\n    return `${listName}-${getIdFromUrlString(listItem.url)}`;\r\n  }\r\n}\r\n\r\nexport function commonFilter(filter, row, column) {\r\n  if (!row[column.id])\r\n    return false;\r\n  return row[column.id].toLowerCase().includes(filter.value.toLowerCase());\r\n}\r\n\r\nexport function commonSort(a, b, desc) {\r\n  a = a === null || a === undefined ? -Infinity : a;\r\n  b = b === null || b === undefined ? -Infinity : b;\r\n  if (typeof a === \"string\") {\r\n    a = a.toLowerCase();\r\n    if (a.startsWith(\"the \"))\r\n      a = a.slice(4);\r\n    else if (a.startsWith(\"a \"))\r\n      a = a.slice(2);\r\n  }\r\n  if (typeof b === \"string\") {\r\n    b = b.toLowerCase();\r\n    if (b.startsWith(\"the \"))\r\n      b = b.slice(4);\r\n    else if (b.startsWith(\"a \"))\r\n      b = b.slice(2);\r\n  }\r\n  if (a > b) {\r\n    return 1;\r\n  }\r\n  if (a < b) {\r\n    return -1;\r\n  }\r\n  return 0;\r\n};","import React, { Component } from \"react\";\r\nimport CallApiButton from \"../components/general/CallApiButton\";\r\nimport { connect } from \"react-redux\";\r\nimport { characterActions } from \"../constants/constants\";\r\nimport ReactTable from \"react-table\";\r\nimport { isStringEmpty, commonFilter, getIdFromUrlString, generateListKey } from \"../utils/utils\";\r\n\r\nclass CharacterContainer extends Component {\r\n  state = {\r\n    pageSize: 10,\r\n    filterUnknownCulture: false\r\n  };\r\n\r\n  getMoreCharacters = () => {\r\n    this.props.fetchCharacters({ page: (+this.props.lastPageRequested + 1) });\r\n  };\r\n\r\n  characterValidator = character => {\r\n    character.name = isStringEmpty(character.name) ? (character.aliases[0] + \"*\") : character.name;\r\n    return character;\r\n  }\r\n\r\n  updateCultureFilter = () => {\r\n    this.setState({ filterUnknownCulture: !this.state.filterUnknownCulture });\r\n  }\r\n\r\n  changePageSize = pageSize => {\r\n    this.setState({ pageSize });\r\n  }\r\n\r\n  filterCharacterByCulture = it => {\r\n    if (!this.state.filterUnknownCulture)\r\n      return true;\r\n    if (isStringEmpty(it.culture)) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  tdProps = (state, rowInfo, column) => {\r\n    return {\r\n      onClick: (e, handleOriginal) => {\r\n        if (column.id === \"characterName\") {\r\n          let id = getIdFromUrlString(rowInfo.original.url);\r\n          this.props.selectCharacter({ id });\r\n        }\r\n        if (handleOriginal) {\r\n          handleOriginal();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  filterBooksAppearedIn = (filter, row) => {\r\n    for (let i = 0; i < row.books.length; i++) {\r\n      let bookId = getIdFromUrlString(row.books[i]);\r\n      if (this.props.books[bookId]) {\r\n        if (this.props.books[bookId].name.toLowerCase().includes(filter.value.toLowerCase()))\r\n          return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  createBookList = rowInfo => {\r\n    return rowInfo.row.books.map(bookUrl => getIdFromUrlString(bookUrl)).filter(bookId => !!this.props.books[bookId]).map(bookId => (<li key={generateListKey('books-appeared-in-table', `${bookId}`)}>{this.props.books[bookId].name}</li>));\r\n  }\r\n\r\n  render() {\r\n    const domainContainerClassName = \"domain-container \" + (this.props.isDrillDownOpen ? \"drill-down-open\" : \"drill-down-closed\");\r\n    const filteredCharacters = Object.values(this.props.characters).filter(it => this.filterCharacterByCulture(it));\r\n    const columns = [{\r\n      Header: \"Name\",\r\n      accessor: 'name',\r\n      id: 'characterName',\r\n      Footer: \"*alias\",\r\n      filterable: true,\r\n      filterMethod: commonFilter\r\n    }, {\r\n      Header: \"Gender\",\r\n      accessor: 'gender',\r\n      filterable: true,\r\n      filterMethod: (filter, row) => row.gender.toLowerCase().startsWith(filter.value.toLowerCase())\r\n    }, {\r\n      Header: \"Culture\",\r\n      accessor: 'culture',\r\n      id: 'culture',\r\n      Cell: (culture => <span>{!isStringEmpty(culture.value) ? culture.value : \"unknown\"}</span>),\r\n      filterable: true,\r\n      filterMethod: commonFilter,\r\n      Footer: <span>Filter Unknown: <input type='checkbox' onChange={this.updateCultureFilter} checked={this.state.filterUnknownCulture} /></span>\r\n    }, {\r\n      Header: \"Books Appeared In\",\r\n      accessor: \"books\",\r\n      Cell: books => (<span><ul className='in-table-list'>{this.createBookList(books)}</ul></span>),\r\n      filterable: true,\r\n      filterMethod: this.filterBooksAppearedIn\r\n    }]\r\n    return (\r\n      <div className={domainContainerClassName}>\r\n        <span className=\"table-span\">\r\n          <ReactTable\r\n            data={filteredCharacters}\r\n            columns={columns}\r\n            resolveData={data => data.map(row => this.characterValidator(row))}\r\n            pageSize={this.state.pageSize}\r\n            onPageSizeChange={this.changePageSize}\r\n            showFilters={true}\r\n            loading={this.props.fetchingCharacters}\r\n            getTdProps={this.tdProps}\r\n          />\r\n        </span>\r\n        <div className=\"api-button\">\r\n          <CallApiButton\r\n            onClick={this.getMoreCharacters}\r\n            buttonName={\"Get More Characters\"}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  componentDidMount = () => {\r\n    if (this.props.lastPageRequested < 1)\r\n      this.props.fetchCharacters({ page: 1 });\r\n  };\r\n\r\n  componentDidUpdate = () => {\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    characters: state.characters.list,\r\n    lastPageRequested: state.characters.lastPageRequested,\r\n    fetchingCharacters: state.characters.fetching,\r\n    books: state.books.list\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fetchCharacters: payload =>\r\n      dispatch({ type: characterActions.CHARACTERS_FETCH_START, payload }),\r\n    selectCharacter: payload => dispatch({ type: characterActions.SELECT_CHARACTER, payload })\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CharacterContainer);\r\n","import React, { Component } from \"react\";\r\nimport 'react-table/react-table.css';\r\nimport { connect } from \"react-redux\";\r\nimport { bookActions } from \"../constants/constants\";\r\nimport ReactTable from \"react-table\";\r\nimport { commonFilter, commonSort } from \"../utils/utils\";\r\n\r\nclass BookContainer extends Component {\r\n\r\n  state = {\r\n    bookFilter: \"\",\r\n    pageSize: 15\r\n  }\r\n\r\n  updateFilter = e => {\r\n    this.setState({ bookFilter: e.target.value });\r\n  }\r\n\r\n  changePageSize = pageSize => {\r\n    this.setState({ pageSize });\r\n  }\r\n\r\n  reformatBookTitle = title => {\r\n    if (title.startsWith(\"The\")) {\r\n      return title.slice(4).concat(\", The\");\r\n    } else if (title.startsWith(\"A\")) {\r\n      return title.slice(2).concat(\", A\");\r\n    }\r\n    return title;\r\n  };\r\n\r\n  convertApiDateToFriendlyDate = (apiDate) => {\r\n    let date = new Date(apiDate);\r\n    return date.toLocaleDateString();\r\n  }\r\n\r\n  render() {\r\n    const domainContainerClassName = \"domain-container \" + (this.props.isDrillDownOpen ? \"drill-down-open\" : \"drill-down-closed\");\r\n    const columns = [\r\n      {\r\n        Header: \"Title\",\r\n        accessor: \"name\",\r\n        showFilter: true,\r\n        id: \"bookTitle\",\r\n        Cell: (title => <span className='book-title'>{this.reformatBookTitle(title.value)}</span>),\r\n        filterMethod: commonFilter,\r\n        sorthMethod: commonSort\r\n      },\r\n      {\r\n        Header: \"Number of Pages\",\r\n        accessor: \"numberOfPages\",\r\n        id: \"numberOfPages\",\r\n        filterable: false\r\n      },\r\n      {\r\n        Header: \"Release Date\",\r\n        accessor: 'released',\r\n        Cell: (date => <span className='book release-date'>{this.convertApiDateToFriendlyDate(date.value)}</span>),\r\n        filterable: true\r\n      }\r\n    ];\r\n    return (\r\n      <div className={domainContainerClassName}>\r\n        <span className=\"table-span\">\r\n          <ReactTable\r\n            data={Object.values(this.props.books)}\r\n            columns={columns}\r\n            loading={this.props.fetchingBooks}\r\n            showFilters={true}\r\n            filterable={true}\r\n            pageSize={this.state.pageSize}\r\n            onPageSizeChange={this.changePageSize}\r\n            pageSizeOptions={[5, 10, 15]}\r\n          />\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n  componentDidMount() {\r\n    this.setState({\r\n      bookFilter: ''\r\n    });\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    books: state.books.list,\r\n    fetchingBooks: state.books.fetching\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fetchBooks: () => dispatch({ type: bookActions.BOOKS_FETCH_START })\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(BookContainer);\r\n","import React, { Component } from \"react\";\r\nimport 'react-table/react-table.css';\r\nimport { connect } from \"react-redux\";\r\nimport { houseActions, characterActions } from \"../constants/constants\";\r\nimport ReactTable from \"react-table\";\r\nimport { commonFilter, getIdFromUrlString, commonSort } from \"../utils/utils\";\r\nimport CallApiButton from '../components/general/CallApiButton';\r\n\r\nclass HouseContainer extends Component {\r\n\r\n  state = {\r\n    houseFilter: \"\",\r\n    pageSize: 20\r\n  }\r\n\r\n  getMoreHouses = () => {\r\n    this.props.fetchHouses({ page: (+this.props.lastPageRequested + 1) });\r\n  };\r\n\r\n  updateFilter = e => {\r\n    this.setState({ houseFilter: e.target.value });\r\n  }\r\n\r\n  changePageSize = pageSize => {\r\n    this.setState({ pageSize });\r\n  }\r\n\r\n  reformatHouseTitle = title => {\r\n    if (title.startsWith(\"The\")) {\r\n      return title.slice(4).concat(\", The\");\r\n    } else if (title.startsWith(\"A\")) {\r\n      return title.slice(2).concat(\", A\");\r\n    }\r\n    return title;\r\n  };\r\n\r\n  convertApiDateToFriendlyDate = apiDate => {\r\n    let date = new Date(apiDate);\r\n    return date.toLocaleDateString();\r\n  }\r\n\r\n  resolveHouseData = houseData => {\r\n    let lordId = getIdFromUrlString(houseData.currentLord);\r\n    if (this.props.characters[lordId])\r\n      houseData.lordName = this.props.characters[lordId].name;\r\n    return houseData;\r\n  }\r\n\r\n  tdProps = (state, rowInfo, column) => {\r\n    return {\r\n      onClick: (e, handleOriginal) => {\r\n        if(column.id === \"name\"){\r\n          let houseId = getIdFromUrlString(rowInfo.original.url);\r\n          this.props.selectHouse({id: houseId});\r\n        } else if (column.id === \"lordName\"){\r\n          if(rowInfo.row.lordName){            \r\n            let characterId = getIdFromUrlString(rowInfo.row.currentLord);\r\n            this.props.selectCharacter({id: characterId})\r\n          }          \r\n        }\r\n        if (handleOriginal) {\r\n          handleOriginal();\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n    const domainContainerClassName = \"domain-container \" + (this.props.isDrillDownOpen ? \"drill-down-open\" : \"drill-down-closed\");\r\n    const columns = [{\r\n      Header: \"Name\",\r\n      accessor: 'name',\r\n      filterMethod: commonFilter\r\n    }, {\r\n      Header: \"Region\",\r\n      accessor: 'region',\r\n      filterMethod: commonFilter,\r\n      sortMethod: commonSort,\r\n      Cell: region => (<span>{region.value ? region.value : 'Region unknown'}</span>)\r\n    }, {\r\n      Header: \"Current Lord Id\",\r\n      accessor: 'currentLord',\r\n      filterable: false,\r\n      show: false\r\n    }, {\r\n      Header: \"Current Lord\",\r\n      accessor: 'lordName',\r\n      filterable: true,\r\n      Cell: lordName => (<span>{lordName.value ? lordName.value : \"Name unknown\"}</span>),\r\n      filterMethod: commonFilter\r\n    }];\r\n    return (\r\n      <div className={domainContainerClassName}>\r\n        <span className=\"table-span\">\r\n          <ReactTable\r\n            data={Object.values(this.props.houses)}\r\n            resolveData={data => data.map(this.resolveHouseData)}\r\n            columns={columns}\r\n            loading={this.props.fetchingHouses}\r\n            showFilters={true}\r\n            filterable={true}\r\n            pageSize={this.state.pageSize}\r\n            onPageSizeChange={this.changePageSize}\r\n            getTdProps={this.tdProps}\r\n          />\r\n        </span>\r\n        <div className='api-button'>\r\n          <CallApiButton\r\n            onClick={this.getMoreHouses}\r\n            buttonName={\"Get More Houses\"}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  componentDidMount = () => {\r\n    if (this.props.lastPageRequested < 1)\r\n      this.props.fetchHouses({ page: 1 });\r\n  };\r\n\r\n  componentDidUpdate = () => {\r\n    Object.values(this.props.houses).filter(house => house.currentLord && !house.lordName).forEach(house => this.props.fetchCharacter({ id: getIdFromUrlString(house.currentLord) }));\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    houses: state.houses.list,\r\n    lastPageRequested: state.houses.lastPageRequested,\r\n    fetchingHouses: state.houses.fetching,\r\n    characters: state.characters.list\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fetchHouses: payload => dispatch({ type: houseActions.HOUSES_FETCH_START, payload }),\r\n    fetchCharacter: payload => dispatch({ type: characterActions.FETCH_CHARACTER_START, payload }),\r\n    selectHouse: payload => dispatch({type: houseActions.SELECT_HOUSE, payload}),\r\n    selectCharacter: payload => dispatch({type: characterActions.SELECT_CHARACTER, payload})\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(HouseContainer);\r\n","import React, { Component } from 'react';\r\n\r\nexport class CharacterDrillDown extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"drill-down\">Character</div>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport { generateListKey, getIdFromUrlString } from '../../utils/utils';\r\n\r\nconst SwornMemberList = props => {\r\n  const listName = 'sworn-member'\r\n  const members = props.members.map(member => {\r\n    const clickable = props.characters[getIdFromUrlString(member.url)];\r\n    const className = clickable ? \"clickable\" : \"unclickable\";\r\n    return (<li className={className} key={generateListKey(listName, member)}>{member.name ? member.name : (member.aliases[0] + \"*\")}</li>)\r\n});\r\n  return (\r\n    <ul>\r\n      {members}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default SwornMemberList;","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { getIdFromUrlString } from '../../utils/utils';\r\nimport { houseActions, characterActions } from '../../constants/constants';\r\nimport SwornMemberList from './SwornMemberList';\r\n\r\nexport class HouseDrillDown extends Component {\r\n\r\n  checkForAndFetchCharacters = () => {\r\n    const overlord = getIdFromUrlString(this.props.house.overlord);\r\n    if (overlord && !this.props.houses[overlord]) {\r\n      this.props.fetchHouse({ id: getIdFromUrlString(this.props.house.overlord) });\r\n    }\r\n    this.props.house.swornMembers.forEach(member => {\r\n      const id = getIdFromUrlString(member);\r\n      if (!this.props.characters[id]) {\r\n        this.props.fetchCharacter({ id });\r\n      }\r\n    });\r\n  }\r\n\r\n  getLordFromCharacters = () => {\r\n    return this.props.characters[getIdFromUrlString(this.props.house.currentLord)];\r\n  }\r\n\r\n  selectLord = () => {\r\n    if (this.getLordFromCharacters()) {\r\n      const id = getIdFromUrlString(this.getLordFromCharacters().url);\r\n      this.props.selectCharacter({ id });\r\n    }\r\n  }\r\n\r\n  selectOverlord = () => {\r\n    if (this.props.house.overlord) {\r\n      const id = getIdFromUrlString(this.props.house.overlord);\r\n      if (this.props.houses[id]) {\r\n        this.props.selectHouse({ id });\r\n      }\r\n    }\r\n  }\r\n\r\n  onMemberClick = member => {\r\n    console.log(\"Selected: \", member);\r\n\r\n  }\r\n\r\n  isLordLoaded = () => {\r\n    return this.props.currentLord && this.getLordFromCharacters();\r\n  }\r\n\r\n  render() {\r\n    const words = this.props.house.words ? (\"\\\"\" + this.props.house.words + \"\\\"\") : '';\r\n    const lordName = this.isLordLoaded() ? this.getLordFromCharacters().name : \"unknown\";\r\n    const coatOfArms = this.props.house.coatOfArms ? this.props.house.coatOfArms : \"unknown\";\r\n    const overlord = this.props.house.overlord ? this.props.houses[getIdFromUrlString(this.props.house.overlord)] : '';\r\n    let overlordName = 'unknown';\r\n    if (overlord) {\r\n      overlordName = overlord.name;\r\n    }\r\n    const members = this.props.house.swornMembers.map(member => getIdFromUrlString(member)).filter(id => !!this.props.characters[id]).map(id => this.props.characters[id]);\r\n    return (\r\n      <div className=\"drill-down\">\r\n        <div className=\"house-title\">\r\n          <h3 className=\"house-name\" align='center'>{this.props.house.name}</h3>\r\n          <h4 className=\"house-words\" align='center'>{words}</h4>\r\n        </div>\r\n        <div className=\"houseInfo\">\r\n          <p onClick={this.selectLord}>Current Lord: {lordName}</p>\r\n          <p>Coat of Arms: {coatOfArms}</p>\r\n          <p onClick={this.selectOverlord} >Overlord: {overlordName}</p>\r\n        </div>\r\n        Sworn Members:\r\n        {this.props.house.swornMembers.length ? <SwornMemberList onMemberClick={this.onMemberClick} members={members} characters={this.props.characters} /> : ' None'}\r\n\r\n      </div>\r\n    )\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.checkForAndFetchCharacters()\r\n  }\r\n\r\n  componentDidUpdate = () => {\r\n    this.checkForAndFetchCharacters()\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    characters: state.characters.list,\r\n    houses: state.houses.list\r\n  }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fetchHouse: payload => dispatch({ type: houseActions.FETCH_HOUSE_START, payload }),\r\n    selectCharacter: payload => dispatch({ type: characterActions.SELECT_CHARACTER, payload }),\r\n    selectHouse: payload => dispatch({ type: houseActions.SELECT_HOUSE, payload }),\r\n    fetchCharacter: payload => dispatch({ type: characterActions.FETCH_CHARACTER_START, payload })\r\n  };\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HouseDrillDown);","import React, { Component } from 'react';\r\nimport CharacterContainer from './containers/CharacterContainer'\r\nimport BookContainer from './containers/BookContainer';\r\nimport { bookActions } from './constants/constants';\r\nimport { connect } from \"react-redux\";\r\nimport './App.css';\r\nimport HouseContainer from './containers/HouseContainer';\r\nimport { CharacterDrillDown } from './components/characterStuff/CharacterDrillDown';\r\nimport HouseDrillDown from './components/houseStuff/HouseDrillDown';\r\n\r\nclass GoTApp extends Component {\r\n\r\n  state = {\r\n    viewBooks: false,\r\n    viewCharacters: true,\r\n    viewHouses: false\r\n  };\r\n\r\n  changeView = e => {\r\n    let viewBooks = false, viewCharacters = false, viewHouses = false;\r\n    switch (e.target.value) {\r\n      case 'books':\r\n        viewBooks = true;\r\n        break;\r\n      case 'characters':\r\n        viewCharacters = true;\r\n        break;\r\n      case 'houses':\r\n        viewHouses = true;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    this.setState({ viewBooks, viewCharacters, viewHouses });\r\n  }\r\n\r\n  render() {\r\n    const isDrillDownOpen = this.props.selectedCharacter || this.props.selectedHouse;    \r\n    return (\r\n      <div className=\"git-app\">\r\n        <div id=\"domain-selector\" align='center'>\r\n          <span>\r\n            <button value='books' onClick={this.changeView} className=\"view-selector-button\">View Books</button>\r\n          </span>\r\n          <span>\r\n            <button value='characters' onClick={this.changeView} className='view-selector-button'>View Characters</button>\r\n          </span>\r\n          <span>\r\n            <button value='houses' onClick={this.changeView} className='view-selector-button'>View Houses</button>\r\n          </span>\r\n        </div>\r\n        {this.state.viewCharacters ? (<CharacterContainer isDrillDownOpen={isDrillDownOpen}/>) : ''}\r\n        {this.state.viewBooks ? (<BookContainer isDrillDownOpen={isDrillDownOpen}/>) : ''}\r\n        {this.state.viewHouses ? (<HouseContainer isDrillDownOpen={isDrillDownOpen}/>) : ''}\r\n        {this.props.selectedCharacter ? (<CharacterDrillDown character={this.props.selectedCharacter} />) : ''}\r\n        {this.props.selectedHouse ? (<HouseDrillDown house={this.props.selectedHouse} />) : ''}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.props.fetchBooks();\r\n  }\r\n\r\n  componentDidUpdate = () => {    \r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    selectedCharacter: state.characters.selectedCharacter,\r\n    selectedHouse: state.houses.selectedHouse\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fetchBooks: () => dispatch({ type: bookActions.BOOKS_FETCH_START })\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GoTApp);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { characterActions, houseActions } from \"../constants/constants\";\r\nimport { getIdFromUrlString } from \"../utils/utils\";\r\n\r\nconst initialState = {\r\n  fetching: false,\r\n  list: {},\r\n  error: null,\r\n  lastPageRequested: 0,\r\n  selectedCharacter: null\r\n};\r\n\r\nexport function characterReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case characterActions.CHARACTERS_FETCH_START:\r\n      return { ...state, fetching: true, error: null };\r\n    case characterActions.CHARACTERS_FETCH_SUCCESS:\r\n      let newCharacters = {};\r\n      action.data.data.forEach(it => newCharacters[getIdFromUrlString(it.url)] = it);\r\n      return { ...state, fetching: false, list: { ...state.list, ...newCharacters }, lastPageRequested: action.lastPageRequested };\r\n    case characterActions.CHARACTERS_FETCH_FAILURE:\r\n      console.log(action.error);\r\n      return { ...state, fetching: false, error: action.error };\r\n    case characterActions.FETCH_CHARACTER_START:\r\n      return { ...state, error: null };\r\n    case characterActions.FETCH_CHARACTER_SUCCESS:\r\n      let newCharacter = {};\r\n      newCharacter[getIdFromUrlString(action.data.data.url)] = action.data.data;\r\n      return { ...state, list: { ...state.list, ...newCharacter } };\r\n    case characterActions.FETCH_CHARACTER_FAILURE:\r\n      console.log(action.error);\r\n      return { ...state, error: action.error }\r\n    case characterActions.SELECT_CHARACTER:\r\n      let selectedCharacter = state.list[action.payload.id];\r\n      return { ...state, selectedCharacter };\r\n    case houseActions.SELECT_HOUSE:\r\n      return { ...state, selectedCharacter: null };\r\n    default:\r\n      // console.log(\"Failed to match action: \" + action.type + \" from characterReducer\");\r\n      return state;\r\n  }\r\n};","import { bookActions } from \"../constants/constants\";\r\n\r\nconst initialState = {\r\n  fetching: false,\r\n  list: {},\r\n  error: null,\r\n  lastPageRequest: 0\r\n};\r\n\r\nexport function bookReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case bookActions.BOOKS_FETCH_START:\r\n      return { ...state, fetching: true, error: null };\r\n    case bookActions.BOOKS_FETCH_SUCCESS:\r\n      return { ...state, fetching: false, list: action.data.data };\r\n    case bookActions.BOOKS_FETCH_FAILURE:\r\n      return { ...state, fetching: false, error: action.error };\r\n    default:\r\n      // console.log(\"Failed to match action \" + action.type + \" from book reducer.\");\r\n      return state;\r\n  }\r\n}","import axios from \"axios\";\r\nimport { isObjectEmpty, constructQueryStringFromObj } from \"../utils/utils\";\r\n\r\nexport default function() {\r\n  const API_ROOT = \"https://www.anapioficeandfire.com/api\";\r\n  return {\r\n    books: {\r\n      fetchAll: () => {\r\n        let method = \"get\";\r\n        let url = API_ROOT + \"/books?pageSize=20\";\r\n        return axios({\r\n          method,\r\n          url\r\n        });\r\n      }\r\n    },\r\n\r\n    characters: {\r\n      fetch: payload => {\r\n        let queryString = !isObjectEmpty(payload)\r\n          ? \"?\" + constructQueryStringFromObj(payload)\r\n          : \"\";\r\n        let method = \"get\";\r\n        let url = API_ROOT + \"/characters\" + queryString;\r\n        return axios({\r\n          method,\r\n          url\r\n        });\r\n      },\r\n      fetchOne: payload => {\r\n        let method = \"get\";\r\n        let url = API_ROOT + \"/characters/\" + payload.id;\r\n        return axios({\r\n          method,\r\n          url\r\n        });\r\n      }\r\n    },\r\n\r\n    houses: {\r\n      fetch: payload => {\r\n        let queryString = !isObjectEmpty(payload)\r\n          ? \"?\" + constructQueryStringFromObj(payload)\r\n          : \"\";\r\n        let method = \"get\";\r\n        let url = API_ROOT + \"/houses\" + queryString;\r\n        return axios({\r\n          method,\r\n          url\r\n        });\r\n      },\r\n      fetchOne: payload => {\r\n        let method = \"get\";\r\n        let url = API_ROOT + \"/houses/\" + payload.id;\r\n        return axios({\r\n          method,\r\n          url\r\n        });\r\n      }\r\n    }\r\n  };\r\n}\r\n","import apiRequests from '../services/apiRequests';\r\nimport { characterActions } from '../constants/constants';\r\nimport { call, put, takeEvery } from 'redux-saga/effects';\r\n\r\nfunction* fetchCharacters(action) {\r\n  try {\r\n    const data = yield call(apiRequests().characters.fetch, action.payload);\r\n    const lastPageRequested = action.payload.page;\r\n    yield put({ type: characterActions.CHARACTERS_FETCH_SUCCESS, data, lastPageRequested });\r\n  } catch (error) {\r\n    yield put({ type: characterActions.CHARACTERS_FETCH_FAILURE, error });\r\n  }\r\n}\r\n\r\nfunction* characterFetch(action) {\r\n  try {    \r\n    const data = yield call(apiRequests().characters.fetchOne, action.payload);\r\n    yield put({type: characterActions.FETCH_CHARACTER_SUCCESS, data});\r\n  } catch (error) {\r\n    yield put({type: characterActions.FETCH_CHARACTER_FAILURE, error})\r\n  }\r\n}\r\n\r\nexport function* characterSagas() {\r\n  yield takeEvery(characterActions.CHARACTERS_FETCH_START, fetchCharacters);\r\n  yield takeEvery(characterActions.FETCH_CHARACTER_START, characterFetch);\r\n}","import { bookActions } from \"../constants/constants\";\r\nimport { takeEvery, put, call } from \"redux-saga/effects\";\r\nimport apiRequests from \"../services/apiRequests\";\r\n\r\nfunction* fetchBooks() {  \r\n  try {\r\n    const data = yield call(apiRequests().books.fetchAll);\r\n    yield put({ type: bookActions.BOOKS_FETCH_SUCCESS, data });\r\n  } catch (error) {\r\n    yield put({ type: bookActions.BOOKS_FETCH_FAILURE, error });\r\n  }\r\n}\r\n\r\nexport function* bookSagas() {\r\n  yield takeEvery(bookActions.BOOKS_FETCH_START, fetchBooks);\r\n}\r\n","import { houseActions, characterActions } from \"../constants/constants\";\r\nimport { getIdFromUrlString } from \"../utils/utils\";\r\n\r\nconst initialState = {\r\n  fetching: false,\r\n  list: {},\r\n  error: null,\r\n  lastPageRequested: 0,\r\n  selectedHouse: null\r\n};\r\n\r\nexport function houseReducer(state = initialState, action) {\r\n  switch (action.type) {\r\n    case houseActions.HOUSES_FETCH_START:\r\n      return { ...state, fetching: true, error: null };\r\n    case houseActions.HOUSES_FETCH_SUCCESS:\r\n      let newHouses = {};\r\n      action.data.data.forEach(it => newHouses[getIdFromUrlString(it.url)] = it);\r\n      return { ...state, fetching: false, list: { ...state.list, ...newHouses }, lastPageRequested: action.lastPageRequested };\r\n    case houseActions.HOUSES_FETCH_FAILURE:\r\n      console.log(action.error);\r\n      return { ...state, fetching: false, error: action.error };\r\n    case houseActions.FETCH_HOUSE_START:\r\n      return { ...state, error: null };\r\n    case houseActions.FETCH_HOUSE_SUCCESS:\r\n      let newHouse = {};\r\n      newHouse[getIdFromUrlString(action.data.data.url)] = action.data.data;\r\n      return { ...state, list: { ...state.list, ...newHouse } };\r\n    case houseActions.FETCH_HOUSE_FAILURE:\r\n      console.log(action.error);\r\n      return { ...state, error: action.error };\r\n    case houseActions.SELECT_HOUSE:\r\n      let selectedHouse = state.list[action.payload.id];\r\n      return { ...state, selectedHouse };\r\n    case characterActions.SELECT_CHARACTER:\r\n      return { ...state, selectedHouse: null };\r\n    default:\r\n      // console.log(\"Failed to match action \" + action.type + \" from house reducer.\");\r\n      return state;\r\n  }\r\n}","import { houseActions } from \"../constants/constants\";\r\nimport { takeEvery, put, call, all } from 'redux-saga/effects';\r\nimport apiRequests from \"../services/apiRequests\";\r\n\r\nfunction* fetchHouses(action) {\r\n  try {\r\n    const data = yield call(apiRequests().houses.fetch, action.payload);\r\n    const lastPageRequested = action.payload.page;\r\n    yield put({ type: houseActions.HOUSES_FETCH_SUCCESS, data, lastPageRequested });\r\n  } catch (error) {\r\n    yield put({ type: houseActions.HOUSES_FETCH_FAILURE, error });\r\n  }\r\n}\r\n\r\nfunction* houseFetch(action) {\r\n  try {    \r\n    const data = yield call(apiRequests().houses.fetchOne, action.payload);\r\n    yield put({type: houseActions.FETCH_HOUSE_SUCCESS, data});\r\n  } catch (error) {\r\n    yield put({type: houseActions.FETCH_HOUSE_FAILURE, error})\r\n  }\r\n}\r\n\r\nexport function* houseSagas() {\r\n  yield all([\r\n    yield takeEvery(houseActions.HOUSES_FETCH_START, fetchHouses),\r\n    yield takeEvery(houseActions.FETCH_HOUSE_START, houseFetch)\r\n  ]);\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport GoTApp from './GoTApp';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport './index.css';\r\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { characterReducer } from './reducers/characterReducer';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { Provider } from 'react-redux';\r\nimport { bookReducer } from './reducers/bookReducer';\r\nimport { characterSagas } from './sagas/characterSagas';\r\nimport { bookSagas } from './sagas/bookSagas';\r\nimport { houseReducer } from './reducers/houseReducer';\r\nimport { houseSagas } from './sagas/houseSagas';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n  characters: characterReducer,\r\n  books: bookReducer,\r\n  houses: houseReducer\r\n});\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\r\nsagaMiddleware.run(bookSagas);\r\nsagaMiddleware.run(characterSagas);\r\nsagaMiddleware.run(houseSagas);\r\nReactDOM.render(\r\n  <Provider store={store}><GoTApp /></Provider>\r\n, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}