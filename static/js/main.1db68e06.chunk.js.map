{"version":3,"sources":["components/general/CallApiButton.js","constants/constants.js","containers/characterContainer.js","GoTApp.js","serviceWorker.js","reducers/characterReducer.js","services/apiRequests.js","sagas/characterSagas.js","index.js"],"names":["CallApiButton","props","react_default","a","createElement","onClick","buttonName","characterActions","CHARACTERS_FETCH_START","CHARACTERS_FETCH_SUCCESS","CHARACTERS_FETCH_FAILURE","CharacterContainer","state","buttonClickFromParent","console","log","_this","fetchCharacters","nameValidator","character","name","undefined","aliases","componentDidMount","_this2","this","react_table_es","data","characters","columns","Header","accessor","resolveData","map","row","general_CallApiButton","Component","connect","list","dispatch","type","GoTApp","className","characterContainer","Boolean","window","location","hostname","match","initialState","fetching","error","apiRequests","books","fetchAll","request","axios","method","url","API_ROOT","houses","characterRootSaga","regenerator_default","wrap","_context","prev","next","call","sent","put","t0","stop","_marked","_context2","takeEvery","_marked2","rootReducer","combineReducers","arguments","length","action","Object","objectSpread","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","es","src_GoTApp","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1db68e06.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst CallApiButton = props => {\r\n  const handleClick = () => {\r\n    props.onClick();\r\n    \r\n  }\r\n\r\n  return(\r\n    <button onClick={handleClick}>\r\n      {props.buttonName}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default CallApiButton;","export const characterActions = {\r\n  CHARACTERS_FETCH_START: \"CHARACTERS_FETCH_START\",\r\n  CHARACTERS_FETCH_SUCCESS: \"CHARACTER_FETCH_SUCCESS\",\r\n  CHARACTERS_FETCH_FAILURE: \"CHARACTERS_FETCH_FAILURE\"\r\n};","import React, { Component } from \"react\";\r\nimport CallApiButton from \"../components/general/CallApiButton\";\r\nimport { connect } from \"react-redux\";\r\nimport { characterActions } from \"../constants/constants\";\r\nimport ReactTable from \"react-table\";\r\n\r\nclass CharacterContainer extends Component {\r\n  state = {};\r\n\r\n  buttonClickFromParent = () => {\r\n    console.log(this.props);\r\n    this.props.fetchCharacters();\r\n  };\r\n\r\n  nameValidator = character => {\r\n    character.name = (character.name === undefined || character.name === \"\") ? (character.aliases[0] + \"*\") : character.name;\r\n    return character;\r\n  }\r\n\r\n  render() {\r\n    const columns = [{\r\n      Header: \"Name\",\r\n      accessor: 'name'\r\n    }]\r\n    return (\r\n      <div>\r\n        <ReactTable\r\n          data={this.props.characters}\r\n          columns={columns}\r\n          resolveData={data => data.map(row => this.nameValidator(row))}\r\n        />\r\n        <CallApiButton\r\n          onClick={this.buttonClickFromParent}\r\n          buttonName={\"Get Characters\"}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  componentDidMount = () => {\r\n    console.log(\"CharacterContainer Mounted\");\r\n  };\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    characters: state.characters.list\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fetchCharacters: () =>\r\n      dispatch({ type: characterActions.CHARACTERS_FETCH_START })\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(CharacterContainer);\r\n","import React, { Component } from 'react';\r\nimport './assets/stylesheets/app.scss';\r\nimport CharacterContainer from './containers/characterContainer'\r\n\r\nclass GoTApp extends Component {\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <CharacterContainer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GoTApp;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { characterActions } from \"../constants/constants\";\r\n\r\nconst CHARACTER_CALL_REQUEST = \"CHARACTER_CALL_REQUEST\";\r\nconst CHARACTER_CALL_SUCCESS = \"CHARACTER_CALL_SUCCESS\";\r\nconst CHARACTER_CALL_FAILURE = \"CHARACTER_CALL_FAILURE\";\r\n\r\nconst initialState = {\r\n  fetching: false,\r\n  list: [],\r\n  error: null\r\n};\r\n\r\nexport function characterReducer(state = initialState, action) {\r\n  console.log(action);\r\n\r\n  switch (action.type) {\r\n    case characterActions.CHARACTERS_FETCH_START:\r\n      return { ...state, fetching: true, error: null };\r\n    case characterActions.CHARACTERS_FETCH_SUCCESS:\r\n      return { ...state, fetching: false, list: action.data.data };\r\n    case characterActions.CHARACTERS_FETCH_FAILURE:\r\n      console.log(\"From failure\");;\r\n\r\n      return { ...state, fetching: false, characters: [], error: action.error };\r\n    default:\r\n      console.log(\"Failed to match action: \" + action.type + \" from characterReducer\");\r\n      return state;\r\n  }\r\n};","import axios from \"axios\";\r\n\r\nexport default function () {\r\n  const API_ROOT = \"https://www.anapioficeandfire.com/api/\";\r\n  const requestInfo = {\r\n    method: 'GET',\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json'\r\n    }\r\n  }\r\n\r\n  return {\r\n    books: {\r\n      fetchAll: request => {\r\n        let method = \"get\";\r\n        let url = API_ROOT + \"/books\";\r\n        return axios({\r\n          method, url\r\n        })\r\n      }\r\n    },\r\n\r\n    characters: {\r\n      fetchAll: request => {\r\n        console.log(\"From services\");\r\n        \r\n        let method = \"get\";\r\n        let url = API_ROOT + \"/characters\";\r\n        return axios({\r\n          method, url\r\n        })\r\n      }\r\n    },\r\n\r\n    houses: {\r\n\r\n    }\r\n  }\r\n}","import { takeEvery } from 'redux-saga/effects';\r\nimport apiRequests  from '../services/apiRequests';\r\nimport { characterActions } from '../constants/constants';\r\nimport { call, put } from 'redux-saga/effects';\r\n\r\nexport function* fetchCharacters() {\r\n  try {\r\n    const data = yield call(apiRequests().characters.fetchAll);\r\n    console.log(data);    \r\n    yield put({type: characterActions.CHARACTERS_FETCH_SUCCESS, data});\r\n  } catch (error) {\r\n    yield put({type: characterActions.CHARACTERS_FETCH_FAILURE, error});\r\n  }\r\n}\r\n\r\nexport function* characterRootSaga(){\r\n  yield takeEvery(characterActions.CHARACTERS_FETCH_START, fetchCharacters);\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport GoTApp from './GoTApp';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport { characterReducer } from './reducers/characterReducer';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { Provider } from 'react-redux';\r\nimport { characterRootSaga } from './sagas/characterSagas';\r\n\r\n\r\nconst rootReducer = combineReducers({characters: characterReducer});\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\r\nsagaMiddleware.run(characterRootSaga);\r\nReactDOM.render(\r\n  <Provider store={store}><GoTApp /></Provider>\r\n, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}